{
  "app": {
    "signal": {
      "SIGINT": "SIGINT (Strg-C) empfangen."
    },
    "start": "{{name}} Gestartet.",
    "stop": "{{name}} Gestoppt."
  },
  "error": {
    "errorConfig": {
      "DB_SERVER_HOST_NOT_FOUND": "DB_SERVER_HOST Umgebungsvariable nicht gefunden.",
      "DB_SERVER_PASSWORD_NOT_FOUND": "DB_SERVER_PASSWORD Umgebungsvariable nicht gefunden.",
      "DB_SERVER_PORT_NOT_FOUND": "DB_SERVER_PORT Umgebungsvariable nicht gefunden.",
      "DB_SERVER_USER_NOT_FOUND": "DB_SERVER_USER Umgebungsvariable nicht gefunden.",
      "DRAGONFLY_HOST_NOT_FOUND": "DRAGONFLY_HOST Umgebungsvariable nicht gefunden.",
      "DRAGONFLY_PORT_NOT_FOUND": "DRAGONFLY_PORT Umgebungsvariable nicht gefunden.",
      "HTTP_PORT_NOT_FOUND": "HTTP_PORT Umgebungsvariable nicht gefunden.",
      "NODE_ENV_NOT_FOUND": "NODE_ENV Umgebungsvariable nicht gefunden.",
      "RED_PANDA_BROKER_NOT_FOUND": "RED_PANDA_BROKER Umgebungsvariable nicht gefunden.",
      "WS_PORT_NOT_FOUND": "WS_PORT Umgebungsvariable nicht gefunden."
    },
    "errorInfrastructure": {
      "DATABASE_CONNECTION_ERROR": "Fehler bei der Verbindung zur Datenbank {{databaseName}}.",
      "DATABASE_DISCONNECT_ERROR": "Fehler beim Trennen der Verbindung zur Datenbank {{databaseName}}.",
      "DATABASE_MODEL_NOT_CREATED": "Modell {{tableName}} nicht erstellt, in der Datenbank {{databaseName}}.",
      "DATABASE_MODEL_NOT_DELETED": "Modell {{tableName}} nicht gelöscht, in der Datenbank {{databaseName}}.",
      "DATABASE_MODEL_NOT_FOUND": "Modell {{tableName}} nicht gefunden, in der Datenbank {{databaseName}}.",
      "DATABASE_MODEL_NOT_UPDATED": "Modell {{tableName}} nicht aktualisiert, in der Datenbank {{databaseName}}.",
      "DATABASE_MODEL_UNIQUE_CONSTRAINT_ERROR": "Modell {{tableName}} Eindeutigkeitsfehler [{{constraint}}], in der Datenbank {{databaseName}}.",
      "DATABASE_NOT_CONNECTED": "Datenbank {{databaseName}} ist nicht verbunden.",
      "DATABASE_NOT_FOUND_IN_DATABASE_MANAGER": "Datenbank {{databaseName}} nicht im Datenbank-Manager gefunden.",
      "DATABASE_OTHER_DATABASE_ERROR": "Anderer Datenbankfehler, in der Datenbank {{databaseName}}.",
      "DRAGONFLY_CONNECTION_ERROR": "Dragonfly-Verbindungsfehler.",
      "DRAGONFLY_DISCONNECT_ERROR": "Dragonfly-Trennungsfehler.",
      "DRAGONFLY_NOT_CONNECTED": "Dragonfly ist nicht verbunden.",
      "RED_PANDA_CONSUMER_CONNECTION_ERROR": "RedPanda-Verbraucherverbindungsfehler.",
      "RED_PANDA_CONSUMER_DISCONNECT_ERROR": "RedPanda-Verbraucher-Trennungsfehler.",
      "RED_PANDA_CONSUMER_IS_NOT_CONNECTED": "RedPanda-Verbraucher ist nicht verbunden.",
      "RED_PANDA_CONSUMER_SUBSCRIBE_ERROR": "RedPanda-Verbraucher-Abonnementfehler.",
      "RED_PANDA_PRODUCER_CONNECTION_ERROR": "RedPanda-Produzentenverbindungsfehler.",
      "RED_PANDA_PRODUCER_DISCONNECT_ERROR": "RedPanda-Produzenten-Trennungsfehler.",
      "RED_PANDA_PRODUCER_IS_NOT_CONNECTED": "RedPanda-Produzent ist nicht verbunden.",
      "RED_PANDA_PRODUCER_SEND_ERROR": "RedPanda-Produzenten-Sendefehler."
    },
    "errorMiddleware": {
      "CREDENTIAL_BLACKLISTED": "Anmeldeinformationen auf der schwarzen Liste.",
      "PERMISSION_DENIED": "Zugriff verweigert.",
      "TOKEN_EXPIRED": "Token ist abgelaufen.",
      "TOKEN_INVALID": "Token ist ungültig.",
      "TOKEN_INVALID_SIGNATURE": "Token-Signatur ist ungültig.",
      "TOKEN_INVALID_STRUCTURE": "Tokenstruktur ist ungültig.",
      "TOKEN_NO_FOUND": "Bearer-Token nicht gefunden."
    },
    "errorSchema": {
      "$EQ_PATTERN": "Der Wert muss vom Typ Zeichenfolge oder Zahl oder boolesch sein.",
      "$GTE_PATTERN": "Der Wert muss vom Typ Zahl oder Zeichenfolge sein.",
      "$GT_PATTERN": "Der Wert muss vom Typ Zahl oder Zeichenfolge sein.",
      "$IN_ARRAY_PATTERN": "Das Array muss mindestens ein Element vom Typ Zeichenfolge haben.",
      "$LTE_PATTERN": "Der Wert muss vom Typ Zahl oder Zeichenfolge sein.",
      "$LT_PATTERN": "Der Wert muss vom Typ Zahl oder Zeichenfolge sein.",
      "$MATCH_PATTERN": "Der Wert muss vom Typ Zeichenfolge sein.",
      "$NEQ_PATTERN": "Der Wert muss vom Typ Zeichenfolge oder Zahl oder boolesch sein.",
      "$NIN_ARRAY_PATTERN": "Das Array darf keine Elemente vom Typ Zeichenfolge haben.",
      "ADDITIONAL_PROPERTIES": "Zusätzliche Eigenschaften sind nicht erlaubt.",
      "DATE_PATTERN": "Das Datum muss ein gültiges Datum sein.",
      "EMAIL_BLACKLIST": "Die E-Mail muss eine gültige E-Mail-Adresse sein und nicht in der Blacklist stehen.",
      "EMAIL_IS_REQUIRED": "Die E-Mail ist erforderlich.",
      "EMAIL_OR_USERNAME_REQUIRED": "Die E-Mail oder der Benutzername ist erforderlich.",
      "EMAIL_PATTERN": "Die E-Mail muss eine gültige E-Mail-Adresse sein.",
      "LIMIT_PATTERN": "Limit muss eine Ganzzahl zwischen 1 und 100 sein",
      "MUST_BE_ARRAY_OR_OBJECT": "Muss ein Array oder ein Objekt sein.",
      "NO_BODY": "Kein Körper gefunden.",
      "OFFSET_PATTERN": "Offset muss eine Ganzzahl größer oder gleich 0 sein",
      "PASSWORD_IS_REQUIRED": "Das Passwort ist erforderlich.",
      "PASSWORD_PATTERN": "Das Passwort muss mindestens einen Großbuchstaben, einen Kleinbuchstaben, eine Zahl und ein Sonderzeichen enthalten und eine Mindestlänge von 8 Zeichen und eine maximale Länge von 32 Zeichen haben.",
      "PERMISSION_PATTERN": "Die Berechtigung muss alphanumerisch sein und zwischen 3 und 32 Zeichen lang sein.",
      "ROLE_PATTERN": "Die Rolle muss alphanumerisch sein und zwischen 3 und 16 Zeichen lang sein.",
      "TYPE_OBJECT": "Typ muss ein Objekt sein.",
      "USERNAME_IS_REQUIRED": "Der Benutzername ist erforderlich.",
      "USERNAME_PATTERN": "Der Benutzername darf nur Buchstaben und Zahlen enthalten und muss eine Mindestlänge von 4 Zeichen und eine maximale Länge von 32 Zeichen haben."
    },
    "errorUseCase": {
      "PASSWORD_NOT_VALID": "Das Passwort ist ungültig."
    }
  },
  "http": {
    "close": "HTTP-Server geschlossen.",
    "handler": {
      "CRUD": {
        "count": "Zählung erfolgreich. Database::{{databaseName}} -> Table::{{tableName}}.",
        "delete": "{{x}} Modelle erfolgreich gelöscht. Database::{{databaseName}} -> Table::{{tableName}}.",
        "deleteAll": "Alle {{x}} Modelle erfolgreich gelöscht. Database::{{databaseName}} -> Table::{{tableName}}.",
        "deleteOne": "Modell erfolgreich gelöscht. Database::{{databaseName}} -> Table::{{tableName}}.",
        "find": "{{x}} Modelle erfolgreich gefunden. Database::{{databaseName}} -> Table::{{tableName}}.",
        "findAll": "Alle {{x}} Modelle erfolgreich gefunden. Database::{{databaseName}} -> Table::{{tableName}}.",
        "findOne": "Modell erfolgreich gefunden. Database::{{databaseName}} -> Table::{{tableName}}.",
        "insert": "Einfügen erfolgreich von {{x}} Elementen. Database::{{databaseName}} -> Table::{{tableName}}.",
        "truncate": "Trunkierung erfolgreich. Database::{{databaseName}} -> Table::{{tableName}}.",
        "update": "Aktualisierung von {{x}} Elementen erfolgreich. Database::{{databaseName}} -> Table::{{tableName}}.",
        "updateAll": "Aktualisierung erfolgreich von allen {{x}} Modellen. Database::{{databaseName}} -> Table::{{tableName}}.",
        "updateOne": "Aktualisierung erfolgreich des Modells. Database::{{databaseName}} -> Table::{{tableName}}."
      },
      "authHandler": {
        "blacklist-check": "Das Konto ist nicht auf der Blacklist.",
        "delete": "Konto-Löschung erfolgreich.",
        "login": "Anmeldung erfolgreich.",
        "logout": "Abmeldung erfolgreich.",
        "register": "Registrierung erfolgreich.",
        "token-blacklist-check": "Der Token ist gültig und das Konto ist nicht auf der Blacklist.",
        "token-check": "Token ist gültig.",
        "update": "Konto-Aktualisierung erfolgreich."
      },
      "microserviceHandler": {
        "info": "Info erfolgreich abgerufen.",
        "ping": "Ping erfolgreich."
      }
    },
    "listening": "HTTP-Server hört auf Port {{port}} im {{mode}}-Modus. (Präfix: {{prefix}}) PID: {{pid}}",
    "plugin": {
      "RateLimitPlugin": {
        "RATE_LIMIT": "Rate Limit {{max}} überschritten. Versuchen Sie es in {{timeWindow}} Sekunden erneut."
      }
    }
  },
  "infrastructure": {
    "database": {
      "connected": "Datenbank {{databaseName}} verbunden.",
      "disconnected": "Datenbank {{databaseName}} getrennt.",
      "rollback_all_migrations": "Datenbank {{databaseName}}-Migrationen rollen alles zurück.",
      "run_all_mirations": "Datenbank {{databaseName}}-Migrationen ausgeführt.",
      "run_all_seeds": "Datenbank {{databaseName}}-Saatgut ausgeführt."
    },
    "dragonfly": {
      "connected": "Dragonfly verbunden.",
      "disconnected": "Dragonfly getrennt."
    },
    "redpanda": {
      "consumer_connected": "RedPanda-Verbraucher verbunden.",
      "consumer_disconnected": "RedPanda-Verbraucher getrennt.",
      "producer_connected": "RedPanda-Produzent verbunden.",
      "producer_disconnected": "RedPanda-Produzent getrennt."
    }
  }
}