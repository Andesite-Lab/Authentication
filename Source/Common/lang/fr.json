{
  "app": {
    "signal": {
      "SIGINT": "SIGINT (Ctrl-C) reçu."
    },
    "start": "{{name}} Démarré.",
    "stop": "{{name}} Arrêté."
  },
  "error": {
    "errorConfig": {
      "DB_SERVER_HOST_NOT_FOUND": "DB_SERVER_HOST variable d'environnement non trouvée.",
      "DB_SERVER_PASSWORD_NOT_FOUND": "DB_SERVER_PASSWORD variable d'environnement non trouvée.",
      "DB_SERVER_PORT_NOT_FOUND": "DB_SERVER_PORT variable d'environnement non trouvée.",
      "DB_SERVER_USER_NOT_FOUND": "DB_SERVER_USER variable d'environnement non trouvée.",
      "DRAGONFLY_HOST_NOT_FOUND": "DRAGONFLY_HOST variable d'environnement non trouvée.",
      "DRAGONFLY_PORT_NOT_FOUND": "DRAGONFLY_PORT variable d'environnement non trouvée.",
      "HTTP_PORT_NOT_FOUND": "HTTP_PORT variable d'environnement non trouvée.",
      "NODE_ENV_NOT_FOUND": "NODE_ENV variable d'environnement non trouvée.",
      "RED_PANDA_BROKER_NOT_FOUND": "RED_PANDA_BROKER variable d'environnement non trouvée.",
      "WS_PORT_NOT_FOUND": "WS_PORT variable d'environnement non trouvée."
    },
    "errorInfrastructure": {
      "DATABASE_CONNECTION_ERROR": "Erreur de connexion à la base de données {{databaseName}}.",
      "DATABASE_DISCONNECT_ERROR": "Erreur de déconnexion de la base de données {{databaseName}}.",
      "DATABASE_MODEL_NOT_CREATED": "Modèle {{tableName}} non créé, dans la base de données {{databaseName}}.",
      "DATABASE_MODEL_NOT_DELETED": "Modèle {{tableName}} non supprimé, dans la base de données {{databaseName}}.",
      "DATABASE_MODEL_NOT_FOUND": "Modèle {{tableName}} non trouvé, dans la base de données {{databaseName}}.",
      "DATABASE_MODEL_NOT_UPDATED": "Modèle {{tableName}} non mis à jour, dans la base de données {{databaseName}}.",
      "DATABASE_MODEL_UNIQUE_CONSTRAINT_ERROR": "Modèle {{tableName}} erreur de contrainte unique [{{constraint}}], dans la base de données {{databaseName}}.",
      "DATABASE_NOT_CONNECTED": "La base de données {{databaseName}} n'est pas connectée.",
      "DATABASE_NOT_FOUND_IN_DATABASE_MANAGER": "Base de données {{databaseName}} non trouvée dans le gestionnaire de base de données.",
      "DATABASE_OTHER_DATABASE_ERROR": "Autre erreur de base de données, dans la base de données {{databaseName}}.",
      "DRAGONFLY_CONNECTION_ERROR": "Erreur de connexion Dragonfly.",
      "DRAGONFLY_DISCONNECT_ERROR": "Erreur de déconnexion Dragonfly.",
      "DRAGONFLY_NOT_CONNECTED": "Dragonfly n'est pas connecté.",
      "RED_PANDA_CONSUMER_CONNECTION_ERROR": "Erreur de connexion du consommateur RedPanda.",
      "RED_PANDA_CONSUMER_DISCONNECT_ERROR": "Erreur de déconnexion du consommateur RedPanda.",
      "RED_PANDA_CONSUMER_IS_NOT_CONNECTED": "Le consommateur RedPanda n'est pas connecté.",
      "RED_PANDA_CONSUMER_SUBSCRIBE_ERROR": "Erreur d'abonnement du consommateur RedPanda.",
      "RED_PANDA_PRODUCER_CONNECTION_ERROR": "Erreur de connexion du producteur RedPanda.",
      "RED_PANDA_PRODUCER_DISCONNECT_ERROR": "Erreur de déconnexion du producteur RedPanda.",
      "RED_PANDA_PRODUCER_IS_NOT_CONNECTED": "Le producteur RedPanda n'est pas connecté.",
      "RED_PANDA_PRODUCER_SEND_ERROR": "Erreur d'envoi du producteur RedPanda."
    },
    "errorMiddleware": {
      "CREDENTIAL_BLACKLISTED": "Le compte est sur liste noire.",
      "PERMISSION_DENIED": "Permission refusée.",
      "TOKEN_EXPIRED": "Le jeton a expiré.",
      "TOKEN_INVALID": "Le jeton n'est pas valide.",
      "TOKEN_INVALID_SIGNATURE": "La signature du jeton n'est pas valide.",
      "TOKEN_INVALID_STRUCTURE": "La structure du jeton n'est pas valide.",
      "TOKEN_NO_FOUND": "Le bearer token n'a pas été trouvé."
    },
    "errorSchema": {
      "$EQ_PATTERN": "La valeur doit être de type string ou number ou boolean.",
      "$GTE_PATTERN": "La valeur doit être de type number ou string.",
      "$GT_PATTERN": "La valeur doit être de type number ou string.",
      "$IN_ARRAY_PATTERN": "Le tableau doit avoir au moins un élément de type string.",
      "$LTE_PATTERN": "La valeur doit être de type number ou string.",
      "$LT_PATTERN": "La valeur doit être de type number ou string.",
      "$MATCH_PATTERN": "La valeur doit être de type string.",
      "$NEQ_PATTERN": "La valeur doit être de type string ou number ou boolean.",
      "$NIN_ARRAY_PATTERN": "Le tableau ne doit pas avoir d'élément de type string.",
      "ADDITIONAL_PROPERTIES": "Des propriétés supplémentaires ne sont pas autorisées.",
      "DATE_PATTERN": "La date doit être une date valide.",
      "EMAIL_BLACKLIST": "L'email doit être une adresse e-mail valide et ne pas figurer sur la liste noire.",
      "EMAIL_IS_REQUIRED": "L'email est requis.",
      "EMAIL_OR_USERNAME_REQUIRED": "L'email ou le nom d'utilisateur est requis.",
      "EMAIL_PATTERN": "L'email doit être une adresse e-mail valide.",
      "LIMIT_PATTERN": "La limite doit être un entier entre 1 et 100",
      "MUST_BE_ARRAY_OR_OBJECT": "Doit être un tableau ou un objet.",
      "NO_BODY": "Aucun corps trouvé.",
      "OFFSET_PATTERN": "Le décalage doit être un entier supérieur ou égal à 0",
      "PASSWORD_IS_REQUIRED": "Le mot de passe est requis.",
      "PASSWORD_PATTERN": "Le mot de passe doit contenir au moins une lettre majuscule, une lettre minuscule, un chiffre et un caractère spécial et doit être d'une longueur minimale de 8 caractères et d'une longueur maximale de 32 caractères.",
      "PERMISSION_PATTERN": "La permission doit être alphanumérique et entre 3 et 32 caractères.",
      "ROLE_PATTERN": "Le rôle doit être alpha numérique et entre 3 et 16 caractères.",
      "TYPE_OBJECT": "Le type doit être un objet.",
      "USERNAME_IS_REQUIRED": "Le nom d'utilisateur est requis.",
      "USERNAME_PATTERN": "Le nom d'utilisateur ne peut contenir que des lettres et des chiffres et doit avoir une longueur minimale de 4 caractères et une longueur maximale de 32 caractères."
    },
    "errorUseCase": {
      "PASSWORD_NOT_VALID": "Le mot de passe n'est pas valide."
    }
  },
  "http": {
    "close": "Serveur HTTP fermé.",
    "handler": {
      "CRUD": {
        "count": "comptage réussi. Database::{{databaseName}} -> Table::{{tableName}}.",
        "delete": "Suppression de {{x}} modèles réussie. Database::{{databaseName}} -> Table::{{tableName}}.",
        "deleteAll": "Tous les {{x}} modèles ont été supprimés avec succès. Database::{{databaseName}} -> Table::{{tableName}}.",
        "deleteOne": "Suppression réussie du model. Database::{{databaseName}} -> Table::{{tableName}}.",
        "find": "{{x}} models ont été trouvés avec succès. Database::{{databaseName}} -> Table::{{tableName}}.",
        "findAll": "Tous les {{x}} models ont été trouvés avec succès. Database::{{databaseName}} -> Table::{{tableName}}.",
        "findOne": "Le model a été trouvé avec succès. Database::{{databaseName}} -> Table::{{tableName}}.",
        "insert": "insertion réussie de {{x}} éléments. Database::{{databaseName}} -> Table::{{tableName}}.",
        "truncate": "Troncage réussi. Database::{{databaseName}} -> Table::{{tableName}}.",
        "update": "Mise à jour de {{x}} éléments réussie. Database::{{databaseName}} -> Table::{{tableName}}.",
        "updateAll": "Mise à jour réussie de tous les {{x}} models. Database::{{databaseName}} -> Table::{{tableName}}.",
        "updateOne": "Mise à jour réussie du model. Database::{{databaseName}} -> Table::{{tableName}}."
      },
      "authHandler": {
        "blacklist-check": "Le compte n'est pas sur la liste noir.",
        "delete": "Suppression de compte réussie.",
        "login": "Connexion réussie.",
        "logout": "Déconnexion réussie.",
        "register": "Inscription réussie.",
        "token-blacklist-check": "Le jeton est valide et le compte n'est pas sur la liste noire.",
        "token-check": "Le jeton est valide.",
        "update": "Mise à jour du compte réussie."
      },
      "microserviceHandler": {
        "info": "Informations récupérées avec succès.",
        "ping": "pong"
      }
    },
    "listening": "Le serveur HTTP écoute sur le port {{port}} en mode {{mode}}. (Préfixe: {{prefix}}) PID: {{pid}}",
    "plugin": {
      "RateLimitPlugin": {
        "RATE_LIMIT": "Limite de débit {{max}} dépassée. Réessayez dans {{timeWindow}} secondes."
      }
    }
  },
  "infrastructure": {
    "database": {
      "connected": "Base de données {{databaseName}} connectée.",
      "disconnected": "Base de données {{databaseName}} déconnectée.",
      "rollback_all_migrations": "Les migrations de base de données {{databaseName}} annulent tout.",
      "run_all_mirations": "Les migrations de base de données {{databaseName}} sont exécutées.",
      "run_all_seeds": "Les graines de base de données {{databaseName}} sont exécutées."
    },
    "dragonfly": {
      "connected": "Dragonfly connecté.",
      "disconnected": "Dragonfly déconnecté."
    },
    "redpanda": {
      "consumer_connected": "Consommateur RedPanda connecté.",
      "consumer_disconnected": "Consommateur RedPanda déconnecté.",
      "producer_connected": "Producteur RedPanda connecté.",
      "producer_disconnected": "Producteur RedPanda déconnecté."
    }
  }
}